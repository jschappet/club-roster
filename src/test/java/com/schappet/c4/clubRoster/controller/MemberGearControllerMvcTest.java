package com.schappet.c4.clubRoster.controller;




import java.util.List;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Arrays;

import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.datatable.DataTableSearch;
import com.schappet.c4.clubRoster.dao.*;
import com.schappet.c4.clubRoster.domain.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;

/**
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since Thu Apr 21 20:21:12 CDT 2016
 */
public class MemberGearControllerMvcTest extends AbstractControllerMVCTests {
	
    private MemberGear firstMemberGear;
    
    @Before
    public void before() {
              // add 20 records to test database
        for(int x=1; x<21; x++){
        	MemberGear memberGear = new MemberGear();
        	clubRosterDaoService.getMemberGearService().save(memberGear);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstMemberGear = memberGear;
	        }
        }   
        this.clubRosterDaoService.getMemberGearService().getSession().flush();
        this.clubRosterDaoService.getMemberGearService().getSession().clear();
          }

    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void addShouldDisplayNewMemberGearForm() throws Exception {
       mockMvc.perform(get("/membergear/add"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("memberGear")) 
       .andExpect(view().name("/clubroster/membergear/edit"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void listShouldSimplyLoadPage() throws Exception {
       mockMvc.perform(get("/membergear/list"))
       .andExpect(status().isOk())
       .andExpect(view().name("/clubroster/membergear/list"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void indexShouldDisplayListPage() throws Exception {
       mockMvc.perform(get("/membergear/"))
       .andExpect(status().isOk())
       .andExpect(view().name("/clubroster/membergear/list"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void listAltShouldLoadListOfMemberGears() throws Exception {
       mockMvc.perform(get("/membergear/list_alt"))
       .andExpect(status().isOk())
       .andExpect(model().attributeExists("memberGearList")) 
       .andExpect(view().name("/clubroster/membergear/list_alt"));
    }
    
    
          	  
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void saveNewShouldPersistAndRedirectToListView() throws Exception {
       long count = clubRosterDaoService.getMemberGearService().count();
       
       mockMvc.perform(post("/membergear/save").with(csrf())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/membergear/list"));   
       
       assertEquals("count should increase by 1", count +1 , clubRosterDaoService.getMemberGearService().count());
	}
     
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void saveExistingShouldPersistAndRedirectToListView() throws Exception {
       long count = clubRosterDaoService.getMemberGearService().count();
         
       mockMvc.perform(post("/membergear/save").param("memberGearId", firstMemberGear.getMemberGearId().toString()).with(csrf())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/membergear/list"));   
         
       assertEquals("count NOT should increase", count , clubRosterDaoService.getMemberGearService().count());
  	}      
  
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void editShouldLoadObjectAndDisplayForm() throws Exception {
    	mockMvc.perform(get("/membergear/edit").param("memberGearId", firstMemberGear.getMemberGearId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("memberGear")) 
         .andExpect(view().name("/clubroster/membergear/edit"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void showShouldLoadAndDisplayObject() throws Exception {
    	mockMvc.perform(get("/membergear/show").param("memberGearId", firstMemberGear.getMemberGearId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("memberGear")) 
         .andExpect(view().name("/clubroster/membergear/show"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void deleteGetShouldLoadAndDisplayYesNoButtons() throws Exception {
    	mockMvc.perform(get("/membergear/delete").param("memberGearId", firstMemberGear.getMemberGearId().toString()))
         .andExpect(status().isOk())
         .andExpect(model().attributeExists("memberGear")) 
         .andExpect(view().name("/clubroster/membergear/delete"));
    }
    
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void deletePostSubmitYesShouldDeleteAndRedirectToListView() throws Exception {
        long count = clubRosterDaoService.getMemberGearService().count();

       mockMvc.perform(post("/membergear/delete").param("memberGearId", firstMemberGear.getMemberGearId().toString())
       .param("submit", "Yes").with(csrf())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/membergear/list"));  
       
       assertEquals("count should decrease by 1", count - 1 , clubRosterDaoService.getMemberGearService().count());
    }
    
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void deletePostSubmitNoShouldNotDeleteAndRedirectToListView() throws Exception {
        long count = clubRosterDaoService.getMemberGearService().count();

       mockMvc.perform(post("/membergear/delete").param("memberGearId", firstMemberGear.getMemberGearId().toString())
       .param("submit", "No").with(csrf())).andExpect(status().is3xxRedirection()).andExpect(view().name("redirect:/membergear/list"));  
       
       assertEquals("count should NOT decrease by 1", count , clubRosterDaoService.getMemberGearService().count());
    }
      
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void defaultDatatableShouldReturnJSONDataWith10Rows() throws Exception {
    	DataTableRequest dtr = getDataTableRequest( Arrays.asList("urls","clubMember","gear","memberGearId" ));
    	ObjectMapper mapper = new ObjectMapper();
    	
    	mockMvc.perform(post("/membergear/datatable").content(mapper.writeValueAsString(dtr))
			.param("display", "list")
			.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
			.with(csrf()))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    	.andExpect(jsonPath("$.recordsTotal", is((int) clubRosterDaoService.getMemberGearService().count())))
    	.andExpect(jsonPath("$.recordsFiltered", is((int) clubRosterDaoService.getMemberGearService().count())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", containsString("show?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("edit?")))
		.andExpect(jsonPath("$.data[0][0]", containsString("delete?")))
        ;
    }
    	  
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void defaultDatatableShouldReturnJSONDataWith10RowsAndDisplayAltnerateGlyphiconURLsAsEmptyByDefault() throws Exception {
    	DataTableRequest dtr = getDataTableRequest( Arrays.asList("urls","clubMember","gear","memberGearId" ));
    	ObjectMapper mapper = new ObjectMapper();
    	
    	mockMvc.perform(post("/membergear/datatable").content(mapper.writeValueAsString(dtr))
			.param("display", "alternateURLs")
			.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
			.with(csrf()))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    	.andExpect(jsonPath("$.recordsTotal", is((int) clubRosterDaoService.getMemberGearService().count())))
    	.andExpect(jsonPath("$.recordsFiltered", is((int) clubRosterDaoService.getMemberGearService().count())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	// max # of returned data rows should be 10 per "length" value
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0][0]", is("")))
        ;
    }
    
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void defaultDatatableShouldReturnErrorTextForBogusColumnName() throws Exception {
    	DataTableRequest dtr = new DataTableRequest();
    	dtr.setStart(1);
    	dtr.setDraw("1");
    	dtr.setLength(10);
    	dtr.setIndividualSearch(true);
    	
    	List<DataTableColumn> columns = dtr.getColumns();
    	DataTableColumn column = new DataTableColumn("0", "asdfasdf", null, true, true, true);
    	DataTableSearch columnSearch = new DataTableSearch("", false);
    	column.setSearch(columnSearch);
    	columns.add(column);
    	dtr.setColumns(columns);
    	
    	ObjectMapper mapper = new ObjectMapper();
    	
    	mockMvc.perform(post("/membergear/datatable").content(mapper.writeValueAsString(dtr))
			.param("display", "list")
			.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
			.with(csrf()))
    	.andExpect(status().isOk())
    	.andExpect(content().contentType("application/json"))
    	.andExpect(jsonPath("$.recordsTotal", is((int) clubRosterDaoService.getMemberGearService().count())))
    	.andExpect(jsonPath("$.recordsFiltered", is((int) clubRosterDaoService.getMemberGearService().count())))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(10))))
    	.andExpect(jsonPath("$.data[0].0", is("[error: column asdfasdf not supported]")))
    	;
    }    
    	  
    @Test
    @WithMockUser(username="user", roles={"ADMIN"})
    public void defaultDatatableShouldReturnExceptionBecauseCantSearchColumnThatDoesntExist() throws Exception {			
		DataTableRequest dtr = new DataTableRequest();
    	dtr.setStart(1);
    	dtr.setDraw("1");
    	dtr.setLength(10);
    	dtr.setIndividualSearch(true);
    	
    	List<DataTableColumn> columns = dtr.getColumns();
    	DataTableColumn column = new DataTableColumn("0", "asdfasdf", null, true, true, true);
    	DataTableSearch columnSearch = new DataTableSearch("epic fail", false);
    	column.setSearch(columnSearch);
    	columns.add(column);
    	dtr.setColumns(columns);
    	
    	ObjectMapper mapper = new ObjectMapper();
    	
    	mockMvc.perform(post("/membergear/datatable").content(mapper.writeValueAsString(dtr))
			.param("display", "list")
			.accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
			.with(csrf()))	
    	.andExpect(status().isOk())
    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
    	.andExpect(jsonPath("$.recordsTotal", is(0)))
    	.andExpect(jsonPath("$.recordsFiltered", is(0)))
    	.andExpect(jsonPath("$.draw", is("1")))
    	.andExpect(jsonPath("$.data", hasSize(is(0))))
    	.andExpect(jsonPath("$.error", IsNull.notNullValue()))
    	;
    }      
          
    
}