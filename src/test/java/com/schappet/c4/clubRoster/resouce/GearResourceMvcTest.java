package com.schappet.c4.clubRoster.resouce;




import java.util.List;

import org.hamcrest.core.IsNull;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.util.Arrays;

import edu.uiowa.icts.datatable.DataTableColumn;
import edu.uiowa.icts.datatable.DataTableRequest;
import edu.uiowa.icts.datatable.DataTableSearch;
import com.schappet.c4.clubRoster.dao.*;
import com.schappet.c4.clubRoster.domain.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertThat;
import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import com.schappet.c4.clubRoster.controller.AbstractControllerMVCTests;
import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.*;

/**
 * Generated by Protogen
 * @see <a href="https://github.com/ui-icts/protogen">https://github.com/ui-icts/protogen</a>
 * @since Sat Apr 23 10:55:33 CDT 2016
 */
public class GearResourceMvcTest extends AbstractControllerMVCTests {
	
    private Gear firstGear;
    private ObjectMapper mapper;
    
    @Before
    public void before() { 
        // add 20 records to test database
        for(int x=1; x<21; x++){
        	Gear gear = new Gear();
        	clubRosterDaoService.getGearService().save(gear);
	        if (x == 1){
	        	// use this ID for update, show, and delete assertions
	        	firstGear = gear;
	        }
        }   
        this.mapper = new ObjectMapper();
        // fix NonUniqueObjectException
        this.clubRosterDaoService.getGearService().getSession().flush();
        this.clubRosterDaoService.getGearService().getSession().clear();
    }    
      
    @Test
    public void getByPathVariableIdShouldLoadAndReturnObject() throws Exception {
    	mockMvc.perform(get("null/gear/"+firstGear.getGearId().toString()))
         .andExpect(status().isOk())
         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
        .andExpect(jsonPath("$.gearId", is(firstGear.getGearId())))
        ;
    }
  
    @Test
    public void getByPathVariableIdShouldReturn404ForBogusId() throws Exception {
    	mockMvc.perform(get("null/gear/-123")).andExpect(status().isNotFound()).andExpect(jsonPath("$.message", is("null/gear/-123 could not be found.")));
    }
    
    @Test
    public void restMappingNotFoundShouldReturn404() throws Exception {
    	mockMvc.perform(get("null/gear/asdfasdf/asdfasdf"))
    	.andExpect(status().isNotFound())
    	 .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
        .andExpect(jsonPath("$.message", is("null/gear/asdfasdf/asdfasdf could not be found.")))
    	;
    }
    
    @Test
    public void createShouldPersistAndReturnObject() throws Exception {
	   long count = clubRosterDaoService.getGearService().count();	       
	   Gear gear = new Gear(); 
       
       mockMvc.perform(post("null/gear/").content(this.mapper.writeValueAsString(gear))
	   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
	   .with(csrf()))
       .andExpect(status().isOk())
       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
       .andExpect(jsonPath("$.gearId").value(IsNull.notNullValue()))  
       ;
       
       assertEquals("count should increase by 1", count +1 , clubRosterDaoService.getGearService().count());
	}
     
    @Test
    public void updateShouldPersistExistingAndReturnObject() throws Exception {
       long count = clubRosterDaoService.getGearService().count();

       mockMvc.perform(post("null/gear/"+ firstGear.getGearId().toString())
    		   .content(this.mapper.writeValueAsString(firstGear))
    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
    		   .with(csrf()))
       .andExpect(status().isOk())
       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
       .andExpect(jsonPath("$.gearId", is(firstGear.getGearId())))
       ;
         
       assertEquals("count NOT should increase", count , clubRosterDaoService.getGearService().count());
  	}  
    
    @Test
    public void updateByPathVariableIdShouldReturn404ForMismatchBetweenPathIdAndObjectId() throws Exception {	       
       String correctId =  firstGear.getGearId().toString();
       // this ID manipulation should be overwritten with path variable id
       firstGear.setGearId(-123);
       
       mockMvc.perform(post("null/gear/"+correctId)
    		   .content(this.mapper.writeValueAsString(firstGear))
    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
    		   .with(csrf()))
       .andExpect(status().isNotFound())
       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
       .andExpect(jsonPath("$.message", is("null/gear/" +correctId +" could not be found.")))
       ;
  	} 
    
    @Test
    public void updateByPathVariableIdShouldReturn404ForBogusPathId() throws Exception {
    	mockMvc.perform(post("null/gear/-123")
    			.content(this.mapper.writeValueAsString(firstGear))
    		   .accept(MediaType.APPLICATION_JSON).contentType(MediaType.APPLICATION_JSON)
    		   .with(csrf()))
    	.andExpect(status().isNotFound())
    	.andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
	    .andExpect(jsonPath("$.message", is("null/gear/-123 could not be found.")));
    }
    
    @Test
    public void deleteShouldDeleteAndReturnStatusOk() throws Exception {
        long count = clubRosterDaoService.getGearService().count();

        mockMvc.perform(delete("null/gear/"+ firstGear.getGearId().toString()).with(csrf()))
       .andExpect(status().isOk());  
       
       assertEquals("count should decrease by 1", count - 1 , clubRosterDaoService.getGearService().count());
    }
    
    @Test
    public void deleteShouldFailWithBogusId() throws Exception {
        long count = clubRosterDaoService.getGearService().count();

        mockMvc.perform(delete("null/gear/-123").with(csrf()))
       .andExpect(status().isNotFound())
       .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
       .andExpect(jsonPath("$.message", is("null/gear/-123 could not be found.")));  
       
       assertEquals("count should NOT decrease by 1", count , clubRosterDaoService.getGearService().count());
    }

    @Test
    public void listShouldReturnAllByDefault() throws Exception {
    	mockMvc.perform(get("null/gear/"))
         .andExpect(status().isOk())
         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
         .andExpect(jsonPath("$.", hasSize(is(20))))
        .andExpect(jsonPath("$.[0].gearId", is(firstGear.getGearId())))
        ;
    }
    
    @Test
    public void listShouldReturnAllByDefaultWithoutTrailUrlSlash() throws Exception {
    	mockMvc.perform(get("null/gear"))
         .andExpect(status().isOk())
         .andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE))
         .andExpect(jsonPath("$.", hasSize(is(20))))
        .andExpect(jsonPath("$.[0].gearId", is(firstGear.getGearId())))
        ;
    }
}